{% extends 'base-staff.html.twig' %}

{% block title %}Modifier un Voyage
{% endblock %}

{% block body %}

<link rel="stylesheet" href={{ asset('css/audio.css') }} />
	<div class="form-container">
		<h2 class="text-center mb-4">Modifier un Voyage</h2>

		{{ form_start(form, {'attr': {'novalidate': 'novalidate', 'class': 'form-vertical'}}) }}

		<div class="form-group mb-3">
			{{ form_label(form.nom) }}
			{{ form_widget(form.nom, {'attr': {'class': 'form-control', 'placeholder': 'Donner le nom du voyage', 'id': 'voyage_nom'}}) }}
			{{ form_errors(form.nom) }}
			<div class="recording-controls" id="nom-recording-controls">
				<button type="button" class="btn btn-record" id="record-nom">
					<i class="fas fa-microphone"></i>
					Enregistrer le nom
				</button>
				<button type="button" class="btn btn-stop" id="stop-nom" style="display:none;">
					<i class="fas fa-stop"></i>
					Arrêter
				</button>
				<span id="nom-recording-status"></span>
				<div class="transcription-target" id="nom-transcription"></div>
			</div>
		</div>

		<div class="form-group mb-3">
			{{ form_label(form.destination) }}
			{{ form_widget(form.destination, {'attr': {'class': 'form-control'}}) }}
			{{ form_errors(form.destination) }}
		</div>

		<div class="form-group mb-3">
			{{ form_label(form.dateDepart) }}
			{{ form_widget(form.dateDepart, {'attr': {'class': 'form-control'}}) }}
			{{ form_errors(form.dateDepart) }}
		</div>

		<div class="form-group mb-3">
			{{ form_label(form.dateArrive) }}
			{{ form_widget(form.dateArrive, {'attr': {'class': 'form-control'}}) }}
			{{ form_errors(form.dateArrive) }}
		</div>

		<div class="form-group mb-3">
			{{ form_label(form.prix) }}
			{{ form_widget(form.prix, {'attr': {'class': 'form-control', 'placeholder': 'Donner le prix'}}) }}
			{{ form_errors(form.prix) }}
		</div>

		<div class="form-group mb-3">
			{{ form_label(form.description) }}
			{{ form_widget(form.description, {'attr': {'class': 'form-control', 'placeholder': 'Donner une description', 'id': 'voyage_description'}}) }}
			{{ form_errors(form.description) }}
			<div class="recording-controls" id="description-recording-controls">
				<button type="button" class="btn btn-record" id="record-description">
					<i class="fas fa-microphone"></i>
					Enregistrer la description
				</button>
				<button type="button" class="btn btn-stop" id="stop-description" style="display:none;">
					<i class="fas fa-stop"></i>
					Arrêter
				</button>
				<span id="description-recording-status"></span>
				<div class="transcription-target" id="description-transcription"></div>
			</div>
		</div>

		<div class="form-group mb-3">
			{{ form_label(form.formule ) }}
			{{ form_widget(form.formule, {'attr': {'class': 'form-control'}}) }}
			{{ form_errors(form.formule) }}
		</div>

		<div class="text-center">
			<button type="submit" class="btn btn-success">Modifier le voyage</button>
		</div>

		{{ form_end(form) }}
	</div>


	 <script>
	document.addEventListener('DOMContentLoaded', function() {
	    if (!('MediaRecorder' in window)) {
	        alert('Votre navigateur ne supporte pas l\'enregistrement audio. Veuillez utiliser Chrome, Firefox, ou Edge.');
	        return;
	    }
	
	    const nomButton = document.getElementById('record-nom');
	    const nomStopButton = document.getElementById('stop-nom');
	    const nomStatus = document.getElementById('nom-recording-status');
	    const nomTranscription = document.getElementById('nom-transcription');
	    const nomInput = document.getElementById('voyage_nom');
	
	    const descButton = document.getElementById('record-description');
	    const descStopButton = document.getElementById('stop-description');
	    const descStatus = document.getElementById('description-recording-status');
	    const descTranscription = document.getElementById('description-transcription');
	    const descInput = document.getElementById('voyage_description');
	
	    let mediaRecorder;
	    let audioChunks = [];
	    let currentField = null;
	    let recognition = null;
	
	    if ('webkitSpeechRecognition' in window || 'SpeechRecognition' in window) {
	        recognition = new (window.webkitSpeechRecognition || window.SpeechRecognition)();
	        recognition.continuous = true;
	        recognition.interimResults = true;
	        recognition.lang = 'fr-FR';
	
	        recognition.onresult = function(event) {
	            const transcriptionEl = currentField === 'nom' ? nomTranscription : descTranscription;
	            const inputEl = currentField === 'nom' ? nomInput : descInput;
	            
	            let interimTranscript = '';
	            let finalTranscript = '';
	            
	            for (let i = event.resultIndex; i < event.results.length; i++) {
	                const transcript = event.results[i][0].transcript;
	                if (event.results[i].isFinal) {
	                    finalTranscript += transcript;
	                } else {
	                    interimTranscript += transcript;
	                }
	            }
	
	            transcriptionEl.innerHTML = `<div>${finalTranscript + interimTranscript}</div>`;
	
	            if (finalTranscript) {
	                inputEl.value += finalTranscript + ' ';
	            }
	        };
	
	        recognition.onerror = function(event) {
	            console.error('Speech recognition error', event.error);
	            yiziEnregistrement();
	        };
	    } else {
	        alert('La reconnaissance vocale n\'est pas supportée par votre navigateur.');
	    }
	
	    nomButton.addEventListener('click', function() {
	        enregistrement('nom');
	    });
	
	    descButton.addEventListener('click', function() {
	        enregistrement('description');
	    });
	
	    nomStopButton.addEventListener('click', function() {
	        yiziEnregistrement();
	    });
	
	    descStopButton.addEventListener('click', function() {
	        yiziEnregistrement();
	    });
	
	    async function enregistrement(field) {
	        try {
	            currentField = field;
	            const button = field === 'nom' ? nomButton : descButton;
	            const stopButton = field === 'nom' ? nomStopButton : descStopButton;
	            const status = field === 'nom' ? nomStatus : descStatus;
	            
	            button.style.display = 'none';
	            stopButton.style.display = 'inline-block';
	            status.innerHTML = '<span class="recording">Enregistrement en cours...</span>';
	
	            const stream = await navigator.mediaDevices.getUserMedia({ audio: true });
	
	            if (recognition) {
	                recognition.start();
	            }
	
	            mediaRecorder = new MediaRecorder(stream);
	            audioChunks = [];
	
	            mediaRecorder.addEventListener('dataavailable', event => {
	                audioChunks.push(event.data);
	            });
	
	            mediaRecorder.addEventListener('stop', async () => {
	                const audioBlob = new Blob(audioChunks, { type: 'audio/webm' });
	                await uploadAudio(audioBlob, field);
	            });
	
	            mediaRecorder.start();
	        } catch (err) {
	            console.error('Erreur debut:', err);
	            alert("Impossible de demarrer l'enregistrement");
	        }
	    }
	
	    function yiziEnregistrement() {
	        if (recognition) {
	            recognition.stop();
	        }
	
	        if (mediaRecorder && mediaRecorder.state !== 'inactive') {
	            mediaRecorder.stop();
	            mediaRecorder.stream.getTracks().forEach(track => track.stop());
	        }
	
	        const button = currentField === 'nom' ? nomButton : descButton;
	        const stopButton = currentField === 'nom' ? nomStopButton : descStopButton;
	        const status = currentField === 'nom' ? nomStatus : descStatus;
	
	        button.style.display = 'inline-block';
	        stopButton.style.display = 'none';
	        status.innerHTML = '<span>Enregistrement terminé</span>';
	    }
	
	    async function uploadAudio(blob, field) {
	        try {
	            const formData = new FormData();
	            formData.append('audio', blob, `${field}_enregistrement.webm`);
	            formData.append('field', field);
	
	            const response = await fetch('/audio/upload', {
	                method: 'POST',
	                body: formData
	            });
	
	            if (!response.ok) {
	                throw new Error('Erreur envoi');
	            }
	
	            const result = await response.json();
	        } catch (err) {
	            console.error('Erreur upload:', err);
	        }
	    }
	});
	</script>
{% endblock %}
